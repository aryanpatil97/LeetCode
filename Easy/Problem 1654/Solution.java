import java.util.*;
public class Solution { public int minimumJumps(int[] forbidden,int a,int b,int x){ Set<Integer> f=new HashSet<>(); for(int v:forbidden) f.add(v); int limit=6000; boolean[][] seen=new boolean[limit+1][2]; Queue<int[]> q=new LinkedList<>(); q.add(new int[]{0,0,0}); seen[0][0]=true; while(!q.isEmpty()){ int[] cur=q.poll(); int pos=cur[0],back=cur[1],steps=cur[2]; if(pos==x) return steps; int forward=pos+a; if(forward<=limit && !seen[forward][0] && !f.contains(forward)){ seen[forward][0]=true; q.add(new int[]{forward,0,steps+1}); } int backPos=pos-b; if(back==0 && backPos>=0 && !seen[backPos][1] && !f.contains(backPos)){ seen[backPos][1]=true; q.add(new int[]{backPos,1,steps+1}); } } return -1; } }